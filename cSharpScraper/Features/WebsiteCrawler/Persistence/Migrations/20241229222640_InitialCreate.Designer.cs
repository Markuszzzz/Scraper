// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cSharpScraper.Features.WebsiteCrawler.Persistence;

#nullable disable

namespace cSharpScraper.Migrations
{
    [DbContext(typeof(DomainDbContext))]
    [Migration("20241229222640_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("cSharpScraper.Crawler.WebCrawler.Models.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("HasBeenCrawled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RootDomainId")
                        .HasColumnType("int");

                    b.Property<int>("SubdomainId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RootDomainId");

                    b.HasIndex("SubdomainId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("cSharpScraper.Crawler.WebCrawler.Models.RootDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RootDomains");
                });

            modelBuilder.Entity("cSharpScraper.Crawler.WebCrawler.Models.Subdomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DomainId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Subdomains");
                });

            modelBuilder.Entity("cSharpScraper.Crawler.WebCrawler.Models.Page", b =>
                {
                    b.HasOne("cSharpScraper.Crawler.WebCrawler.Models.RootDomain", "RootDomain")
                        .WithMany()
                        .HasForeignKey("RootDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cSharpScraper.Crawler.WebCrawler.Models.Subdomain", "Subdomain")
                        .WithMany("Pages")
                        .HasForeignKey("SubdomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RootDomain");

                    b.Navigation("Subdomain");
                });

            modelBuilder.Entity("cSharpScraper.Crawler.WebCrawler.Models.Subdomain", b =>
                {
                    b.HasOne("cSharpScraper.Crawler.WebCrawler.Models.RootDomain", "RootDomain")
                        .WithMany("Subdomains")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RootDomain");
                });

            modelBuilder.Entity("cSharpScraper.Crawler.WebCrawler.Models.RootDomain", b =>
                {
                    b.Navigation("Subdomains");
                });

            modelBuilder.Entity("cSharpScraper.Crawler.WebCrawler.Models.Subdomain", b =>
                {
                    b.Navigation("Pages");
                });
#pragma warning restore 612, 618
        }
    }
}
